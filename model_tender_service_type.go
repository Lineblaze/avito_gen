/*
Tender Management API

API для управления тендерами и предложениями.   Основные функции API включают управление тендерами (создание, изменение, получение списка) и управление предложениями (создание, изменение, получение списка). 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TenderServiceType Вид услуги, к которой относиться тендер
type TenderServiceType string

// List of tenderServiceType
const (
	CONSTRUCTION TenderServiceType = "Construction"
	DELIVERY TenderServiceType = "Delivery"
	MANUFACTURE TenderServiceType = "Manufacture"
)

// All allowed values of TenderServiceType enum
var AllowedTenderServiceTypeEnumValues = []TenderServiceType{
	"Construction",
	"Delivery",
	"Manufacture",
}

func (v *TenderServiceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TenderServiceType(value)
	for _, existing := range AllowedTenderServiceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TenderServiceType", value)
}

// NewTenderServiceTypeFromValue returns a pointer to a valid TenderServiceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTenderServiceTypeFromValue(v string) (*TenderServiceType, error) {
	ev := TenderServiceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TenderServiceType: valid values are %v", v, AllowedTenderServiceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TenderServiceType) IsValid() bool {
	for _, existing := range AllowedTenderServiceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to tenderServiceType value
func (v TenderServiceType) Ptr() *TenderServiceType {
	return &v
}

type NullableTenderServiceType struct {
	value *TenderServiceType
	isSet bool
}

func (v NullableTenderServiceType) Get() *TenderServiceType {
	return v.value
}

func (v *NullableTenderServiceType) Set(val *TenderServiceType) {
	v.value = val
	v.isSet = true
}

func (v NullableTenderServiceType) IsSet() bool {
	return v.isSet
}

func (v *NullableTenderServiceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenderServiceType(val *TenderServiceType) *NullableTenderServiceType {
	return &NullableTenderServiceType{value: val, isSet: true}
}

func (v NullableTenderServiceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenderServiceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

