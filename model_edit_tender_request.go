/*
Tender Management API

API для управления тендерами и предложениями.   Основные функции API включают управление тендерами (создание, изменение, получение списка) и управление предложениями (создание, изменение, получение списка). 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EditTenderRequest struct for EditTenderRequest
type EditTenderRequest struct {
	// Полное название тендера
	Name *string `json:"name,omitempty"`
	// Описание тендера
	Description *string `json:"description,omitempty"`
	ServiceType *TenderServiceType `json:"serviceType,omitempty"`
}

// NewEditTenderRequest instantiates a new EditTenderRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditTenderRequest() *EditTenderRequest {
	this := EditTenderRequest{}
	return &this
}

// NewEditTenderRequestWithDefaults instantiates a new EditTenderRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditTenderRequestWithDefaults() *EditTenderRequest {
	this := EditTenderRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EditTenderRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditTenderRequest) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EditTenderRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EditTenderRequest) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EditTenderRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditTenderRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EditTenderRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EditTenderRequest) SetDescription(v string) {
	o.Description = &v
}

// GetServiceType returns the ServiceType field value if set, zero value otherwise.
func (o *EditTenderRequest) GetServiceType() TenderServiceType {
	if o == nil || o.ServiceType == nil {
		var ret TenderServiceType
		return ret
	}
	return *o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditTenderRequest) GetServiceTypeOk() (*TenderServiceType, bool) {
	if o == nil || o.ServiceType == nil {
		return nil, false
	}
	return o.ServiceType, true
}

// HasServiceType returns a boolean if a field has been set.
func (o *EditTenderRequest) HasServiceType() bool {
	if o != nil && o.ServiceType != nil {
		return true
	}

	return false
}

// SetServiceType gets a reference to the given TenderServiceType and assigns it to the ServiceType field.
func (o *EditTenderRequest) SetServiceType(v TenderServiceType) {
	o.ServiceType = &v
}

func (o EditTenderRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.ServiceType != nil {
		toSerialize["serviceType"] = o.ServiceType
	}
	return json.Marshal(toSerialize)
}

type NullableEditTenderRequest struct {
	value *EditTenderRequest
	isSet bool
}

func (v NullableEditTenderRequest) Get() *EditTenderRequest {
	return v.value
}

func (v *NullableEditTenderRequest) Set(val *EditTenderRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEditTenderRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEditTenderRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditTenderRequest(val *EditTenderRequest) *NullableEditTenderRequest {
	return &NullableEditTenderRequest{value: val, isSet: true}
}

func (v NullableEditTenderRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditTenderRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


