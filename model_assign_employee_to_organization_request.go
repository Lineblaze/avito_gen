/*
Tender Management API

API для управления тендерами и предложениями.   Основные функции API включают управление тендерами (создание, изменение, получение списка) и управление предложениями (создание, изменение, получение списка).

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AssignEmployeeToOrganizationRequest struct for AssignEmployeeToOrganizationRequest
type AssignEmployeeToOrganizationRequest struct {
	// Уникальный slug организации.
	OrganizationId string `json:"organizationId"`
	// Уникальный slug пользователя.
	UserId string `json:"userId"`
}

// NewAssignEmployeeToOrganizationRequest instantiates a new AssignEmployeeToOrganizationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssignEmployeeToOrganizationRequest(organizationId string, userId string) *AssignEmployeeToOrganizationRequest {
	this := AssignEmployeeToOrganizationRequest{}
	this.OrganizationId = organizationId
	this.UserId = userId
	return &this
}

// NewAssignEmployeeToOrganizationRequestWithDefaults instantiates a new AssignEmployeeToOrganizationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssignEmployeeToOrganizationRequestWithDefaults() *AssignEmployeeToOrganizationRequest {
	this := AssignEmployeeToOrganizationRequest{}
	return &this
}

// GetOrganizationId returns the OrganizationId field value
func (o *AssignEmployeeToOrganizationRequest) GetOrganizationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *AssignEmployeeToOrganizationRequest) GetOrganizationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *AssignEmployeeToOrganizationRequest) SetOrganizationId(v string) {
	o.OrganizationId = v
}

// GetUserId returns the UserId field value
func (o *AssignEmployeeToOrganizationRequest) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *AssignEmployeeToOrganizationRequest) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *AssignEmployeeToOrganizationRequest) SetUserId(v string) {
	o.UserId = v
}

func (o AssignEmployeeToOrganizationRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["organizationId"] = o.OrganizationId
	}
	if true {
		toSerialize["userId"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullableAssignEmployeeToOrganizationRequest struct {
	value *AssignEmployeeToOrganizationRequest
	isSet bool
}

func (v NullableAssignEmployeeToOrganizationRequest) Get() *AssignEmployeeToOrganizationRequest {
	return v.value
}

func (v *NullableAssignEmployeeToOrganizationRequest) Set(val *AssignEmployeeToOrganizationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAssignEmployeeToOrganizationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAssignEmployeeToOrganizationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssignEmployeeToOrganizationRequest(val *AssignEmployeeToOrganizationRequest) *NullableAssignEmployeeToOrganizationRequest {
	return &NullableAssignEmployeeToOrganizationRequest{value: val, isSet: true}
}

func (v NullableAssignEmployeeToOrganizationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssignEmployeeToOrganizationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
