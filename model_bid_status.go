/*
Tender Management API

API для управления тендерами и предложениями.   Основные функции API включают управление тендерами (создание, изменение, получение списка) и управление предложениями (создание, изменение, получение списка). 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// BidStatus Статус предложения
type BidStatus string

// List of bidStatus
const (
	BidStatusCREATED   BidStatus = "Created"
	BidStatusPUBLISHED BidStatus = "Published"
	BidStatusCANCELED  BidStatus = "Canceled"
	BidStatusAPPROVED  BidStatus = "Approved"
	BidStatusREJECTED  BidStatus = "Rejected"
)

// All allowed values of BidStatus enum
var AllowedBidStatusEnumValues = []BidStatus{
	"Created",
	"Published",
	"Canceled",
	"Approved",
	"Rejected",
}

func (v *BidStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BidStatus(value)
	for _, existing := range AllowedBidStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BidStatus", value)
}

// NewBidStatusFromValue returns a pointer to a valid BidStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBidStatusFromValue(v string) (*BidStatus, error) {
	ev := BidStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BidStatus: valid values are %v", v, AllowedBidStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BidStatus) IsValid() bool {
	for _, existing := range AllowedBidStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to bidStatus value
func (v BidStatus) Ptr() *BidStatus {
	return &v
}

type NullableBidStatus struct {
	value *BidStatus
	isSet bool
}

func (v NullableBidStatus) Get() *BidStatus {
	return v.value
}

func (v *NullableBidStatus) Set(val *BidStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableBidStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableBidStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBidStatus(val *BidStatus) *NullableBidStatus {
	return &NullableBidStatus{value: val, isSet: true}
}

func (v NullableBidStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBidStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

