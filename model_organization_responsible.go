/*
Tender Management API

API для управления тендерами и предложениями.   Основные функции API включают управление тендерами (создание, изменение, получение списка) и управление предложениями (создание, изменение, получение списка).

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OrganizationResponsible Связь пользователя и организации
type OrganizationResponsible struct {
	// Уникальный slug cвязи.
	Id *string `json:"Id,omitempty"`
	// Уникальный slug организации.
	OrganizationId string `json:"organizationId"`
	// Уникальный slug пользователя.
	UserId string `json:"userId"`
}

// NewOrganizationResponsible instantiates a new OrganizationResponsible object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationResponsible(organizationId string, userId string) *OrganizationResponsible {
	this := OrganizationResponsible{}
	this.OrganizationId = organizationId
	this.UserId = userId
	return &this
}

// NewOrganizationResponsibleWithDefaults instantiates a new OrganizationResponsible object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationResponsibleWithDefaults() *OrganizationResponsible {
	this := OrganizationResponsible{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OrganizationResponsible) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationResponsible) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OrganizationResponsible) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OrganizationResponsible) SetId(v string) {
	o.Id = &v
}

// GetOrganizationId returns the OrganizationId field value
func (o *OrganizationResponsible) GetOrganizationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *OrganizationResponsible) GetOrganizationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *OrganizationResponsible) SetOrganizationId(v string) {
	o.OrganizationId = v
}

// GetUserId returns the UserId field value
func (o *OrganizationResponsible) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *OrganizationResponsible) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *OrganizationResponsible) SetUserId(v string) {
	o.UserId = v
}

func (o OrganizationResponsible) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["Id"] = o.Id
	}
	if true {
		toSerialize["organizationId"] = o.OrganizationId
	}
	if true {
		toSerialize["userId"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullableOrganizationResponsible struct {
	value *OrganizationResponsible
	isSet bool
}

func (v NullableOrganizationResponsible) Get() *OrganizationResponsible {
	return v.value
}

func (v *NullableOrganizationResponsible) Set(val *OrganizationResponsible) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationResponsible) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationResponsible) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationResponsible(val *OrganizationResponsible) *NullableOrganizationResponsible {
	return &NullableOrganizationResponsible{value: val, isSet: true}
}

func (v NullableOrganizationResponsible) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationResponsible) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
