/*
Tender Management API

API для управления тендерами и предложениями.   Основные функции API включают управление тендерами (создание, изменение, получение списка) и управление предложениями (создание, изменение, получение списка). 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrganizationType Типы организаций
type OrganizationType string

// List of organizationType
const (
	IE OrganizationType = "IE"
	LLC OrganizationType = "LLC"
	JSC OrganizationType = "JSC"
)

// All allowed values of OrganizationType enum
var AllowedOrganizationTypeEnumValues = []OrganizationType{
	"IE",
	"LLC",
	"JSC",
}

func (v *OrganizationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrganizationType(value)
	for _, existing := range AllowedOrganizationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrganizationType", value)
}

// NewOrganizationTypeFromValue returns a pointer to a valid OrganizationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrganizationTypeFromValue(v string) (*OrganizationType, error) {
	ev := OrganizationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrganizationType: valid values are %v", v, AllowedOrganizationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrganizationType) IsValid() bool {
	for _, existing := range AllowedOrganizationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to organizationType value
func (v OrganizationType) Ptr() *OrganizationType {
	return &v
}

type NullableOrganizationType struct {
	value *OrganizationType
	isSet bool
}

func (v NullableOrganizationType) Get() *OrganizationType {
	return v.value
}

func (v *NullableOrganizationType) Set(val *OrganizationType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationType(val *OrganizationType) *NullableOrganizationType {
	return &NullableOrganizationType{value: val, isSet: true}
}

func (v NullableOrganizationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

